# Generated by Django 5.0.4 on 2024-05-10 06:41
# pylint: disable=too-many-lines
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("contenttypes", "0002_remove_content_type_name"),
    ]

    operations = [
        migrations.CreateModel(
            name="BaseItem",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "visual_str",
                    models.CharField(max_length=255, verbose_name="Название иконки?"),
                ),
                (
                    "description_code",
                    models.CharField(
                        max_length=255,
                        verbose_name="Код названия(ссылка на переводы)",
                    ),
                ),
                ("cost", models.PositiveIntegerField(verbose_name="Базовая цена")),
                (
                    "name",
                    models.CharField(
                        max_length=255,
                        unique=True,
                        verbose_name="Название(код в игре)",
                    ),
                ),
                (
                    "inv_name",
                    models.CharField(
                        max_length=255,
                        null=True,
                        verbose_name="Название в инвентаре?",
                    ),
                ),
                (
                    "inv_name_short",
                    models.CharField(
                        max_length=255,
                        null=True,
                        verbose_name="Название в инвентаре(сокращенное)?",
                    ),
                ),
                (
                    "inv_weight",
                    models.DecimalField(
                        decimal_places=3,
                        max_digits=12,
                        verbose_name="Вес",
                    ),
                ),
                ("cheat_item", models.BooleanField(default=False)),
                (
                    "quest_item",
                    models.BooleanField(
                        default=False,
                        verbose_name="Квестовый предмет",
                    ),
                ),
                (
                    "inv_grid_width",
                    models.PositiveIntegerField(
                        null=True,
                        verbose_name="Ширина иконки",
                    ),
                ),
                (
                    "inv_grid_height",
                    models.PositiveIntegerField(
                        null=True,
                        verbose_name="Высота иконки",
                    ),
                ),
                (
                    "inv_grid_x",
                    models.PositiveIntegerField(
                        null=True,
                        verbose_name="Отступ по длине иконки в большом файле",
                    ),
                ),
                (
                    "inv_grid_y",
                    models.PositiveIntegerField(
                        null=True,
                        verbose_name="Отступ по высоте иконки в большом файле",
                    ),
                ),
                (
                    "inv_icon",
                    models.ImageField(
                        null=True,
                        upload_to="item_icons/",
                        verbose_name="Иконка в инвентаре",
                    ),
                ),
                (
                    "polymorphic_ctype",
                    models.ForeignKey(
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="polymorphic_%(app_label)s.%(class)s_set+",
                        to="contenttypes.contenttype",
                    ),
                ),
            ],
            options={
                "verbose_name": "Предмет",
                "verbose_name_plural": "Предметы",
            },
        ),
        migrations.CreateModel(
            name="BaseScriptReward",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "polymorphic_ctype",
                    models.ForeignKey(
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="polymorphic_%(app_label)s.%(class)s_set+",
                        to="contenttypes.contenttype",
                    ),
                ),
            ],
            options={
                "verbose_name": "Награда выдаваемая скриптом",
            },
        ),
        migrations.CreateModel(
            name="BaseTrade",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(max_length=120, verbose_name="Название секции"),
                ),
                (
                    "condition",
                    models.CharField(max_length=250, null=True, verbose_name="Условие"),
                ),
            ],
            options={
                "verbose_name": "Торговля",
            },
        ),
        migrations.CreateModel(
            name="Character",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("game_code", models.CharField(max_length=255, unique=True)),
                ("name", models.CharField(max_length=255, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="Community",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "index",
                    models.PositiveSmallIntegerField(verbose_name="ID группировки"),
                ),
                ("code", models.CharField(max_length=128, verbose_name="Код в игре")),
                (
                    "type",
                    models.CharField(
                        choices=[("monster", "Мутант"), ("stalker", "Сталкер")],
                        max_length=128,
                        verbose_name="Тип",
                    ),
                ),
            ],
            options={
                "verbose_name": "Группировка",
                "verbose_name_plural": "Группировки",
            },
        ),
        migrations.CreateModel(
            name="EncyclopediaArticle",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "game_id",
                    models.CharField(
                        max_length=255,
                        unique=True,
                        verbose_name="Игровой id",
                    ),
                ),
                ("name", models.CharField(max_length=255, verbose_name="Название")),
                (
                    "group_name",
                    models.CharField(max_length=255, null=True, verbose_name="Группа"),
                ),
                (
                    "ltx_str",
                    models.CharField(
                        max_length=255,
                        null=True,
                        unique=True,
                        verbose_name="Иконка",
                    ),
                ),
                ("text", models.TextField()),
            ],
            options={
                "verbose_name": "Статья в энциклопедии",
                "verbose_name_plural": "Статьи в энциклопедии",
            },
        ),
        migrations.CreateModel(
            name="EncyclopediaGroup",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        max_length=255,
                        unique=True,
                        verbose_name="Название",
                    ),
                ),
            ],
            options={
                "verbose_name": "Группа в энциклопедии",
                "verbose_name_plural": "Группы в энциклопедии",
            },
        ),
        migrations.CreateModel(
            name="GameTask",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "game_id",
                    models.CharField(
                        max_length=256,
                        unique=True,
                        verbose_name="Игровой id",
                    ),
                ),
                (
                    "title_id_raw",
                    models.CharField(max_length=256, verbose_name="Сырое название"),
                ),
                ("prio", models.IntegerField(null=True)),
            ],
            options={
                "verbose_name": "Сюжетное задание",
                "verbose_name_plural": "Сюжетные задания",
            },
        ),
        migrations.CreateModel(
            name="Icon",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=512, unique=True)),
                ("icon", models.ImageField(upload_to="")),
            ],
            options={
                "verbose_name": "Иконка",
                "verbose_name_plural": "Иконки",
            },
        ),
        migrations.CreateModel(
            name="InventoryBox",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "section_name",
                    models.CharField(
                        max_length=255,
                        unique=True,
                        verbose_name="Название секции",
                    ),
                ),
                (
                    "source_file_name",
                    models.CharField(
                        max_length=255,
                        verbose_name="Путь к файлу(custom_data)",
                    ),
                ),
                (
                    "items_raw",
                    models.CharField(
                        max_length=1000,
                        null=True,
                        verbose_name="Строка с предметами",
                    ),
                ),
                (
                    "visual_str",
                    models.CharField(
                        max_length=255,
                        null=True,
                        verbose_name="Внешний вид(название - visual)",
                    ),
                ),
            ],
            options={
                "verbose_name": "Тайник",
                "verbose_name_plural": "Тайники",
            },
        ),
        migrations.CreateModel(
            name="ItemInTradeBase",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "item_name",
                    models.CharField(
                        max_length=255,
                        verbose_name="Идентификатор предмета",
                    ),
                ),
                (
                    "item",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="game_parser.baseitem",
                        verbose_name="Предмет",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Location",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "game_id",
                    models.CharField(
                        max_length=3,
                        unique=True,
                        verbose_name="Ид уровня",
                    ),
                ),
                (
                    "game_code",
                    models.CharField(
                        max_length=255,
                        unique=True,
                        verbose_name="Название уровня",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        max_length=255,
                        null=True,
                        unique=True,
                        verbose_name="Код человекочитабельного названия",
                    ),
                ),
                (
                    "offset_str",
                    models.CharField(
                        max_length=255,
                        null=True,
                        verbose_name="Сдвиг на глобальной карте??",
                    ),
                ),
            ],
            options={
                "verbose_name": "Локация",
                "verbose_name_plural": "Локации",
            },
        ),
        migrations.CreateModel(
            name="NpcLogicConfig",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(max_length=255, verbose_name="Название файла"),
                ),
                (
                    "source_file_name",
                    models.CharField(
                        max_length=255,
                        unique=True,
                        verbose_name="Исходный файл",
                    ),
                ),
                (
                    "trade_file_name",
                    models.CharField(
                        max_length=255,
                        null=True,
                        verbose_name="Название файла торговли",
                    ),
                ),
            ],
            options={
                "verbose_name": "Логики НПС",
                "verbose_name_plural": "Файлы логик НПС",
            },
        ),
        migrations.CreateModel(
            name="Trader",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("game_code", models.CharField(max_length=255, unique=True)),
                ("name", models.CharField(max_length=255, null=True)),
                ("source_file", models.CharField(max_length=255, null=True)),
            ],
            options={
                "verbose_name": "Профиль торговли",
                "verbose_name_plural": "Профили торговли",
            },
        ),
        migrations.CreateModel(
            name="Translation",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "code",
                    models.CharField(
                        max_length=128,
                        unique=True,
                        verbose_name="Код названия",
                    ),
                ),
                ("rus", models.TextField(verbose_name="Русский")),
                ("eng", models.TextField(verbose_name="Английский")),
                ("ukr", models.TextField(verbose_name="Украинский")),
                ("pln", models.TextField(verbose_name="Польский")),
                ("fra", models.TextField(verbose_name="Французский")),
            ],
            options={
                "verbose_name": "Перевод",
                "verbose_name_plural": "Переводы",
            },
        ),
        migrations.CreateModel(
            name="Addon",
            fields=[
                (
                    "baseitem_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="game_parser.baseitem",
                    ),
                ),
            ],
            options={
                "verbose_name": "Обвес",
                "verbose_name_plural": "Обвесы",
            },
            bases=("game_parser.baseitem",),
        ),
        migrations.CreateModel(
            name="Ammo",
            fields=[
                (
                    "baseitem_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="game_parser.baseitem",
                    ),
                ),
                (
                    "box_size",
                    models.PositiveIntegerField(
                        verbose_name="Кол-во патронов в пачке?",
                    ),
                ),
                (
                    "k_dist",
                    models.DecimalField(decimal_places=4, max_digits=10, null=True),
                ),
                (
                    "k_disp",
                    models.DecimalField(decimal_places=4, max_digits=10, null=True),
                ),
                (
                    "k_hit",
                    models.DecimalField(decimal_places=4, max_digits=10, null=True),
                ),
                (
                    "k_impulse",
                    models.DecimalField(decimal_places=4, max_digits=10, null=True),
                ),
                (
                    "k_pierce",
                    models.DecimalField(decimal_places=4, max_digits=10, null=True),
                ),
                (
                    "impair",
                    models.DecimalField(decimal_places=4, max_digits=10, null=True),
                ),
                (
                    "wm_size",
                    models.DecimalField(decimal_places=4, max_digits=10, null=True),
                ),
                ("tracer_str", models.CharField(max_length=5, null=True)),
                ("explosive_str", models.CharField(max_length=5, null=True)),
                (
                    "buck_shot",
                    models.PositiveIntegerField(
                        null=True,
                        verbose_name="Дроби в выстреле?",
                    ),
                ),
            ],
            options={
                "verbose_name": "Боеприпас",
                "verbose_name_plural": "Боеприпасы",
            },
            bases=("game_parser.baseitem",),
        ),
        migrations.CreateModel(
            name="Artefact",
            fields=[
                (
                    "baseitem_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="game_parser.baseitem",
                    ),
                ),
            ],
            options={
                "verbose_name": "Базовый артефакт",
                "verbose_name_plural": "Артефакты/Капсулы аномалий/Эмбрионы мутантов",
            },
            bases=("game_parser.baseitem",),
        ),
        migrations.CreateModel(
            name="Explosive",
            fields=[
                (
                    "baseitem_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="game_parser.baseitem",
                    ),
                ),
            ],
            options={
                "verbose_name": "Взрывчатка",
                "verbose_name_plural": "Взрывчатка",
            },
            bases=("game_parser.baseitem",),
        ),
        migrations.CreateModel(
            name="Grenade",
            fields=[
                (
                    "baseitem_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="game_parser.baseitem",
                    ),
                ),
            ],
            options={
                "verbose_name": "Граната",
                "verbose_name_plural": "Гранаты",
            },
            bases=("game_parser.baseitem",),
        ),
        migrations.CreateModel(
            name="Knife",
            fields=[
                (
                    "baseitem_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="game_parser.baseitem",
                    ),
                ),
            ],
            options={
                "verbose_name": "Нож",
                "verbose_name_plural": "Ножи",
            },
            bases=("game_parser.baseitem",),
        ),
        migrations.CreateModel(
            name="MonsterPart",
            fields=[
                (
                    "baseitem_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="game_parser.baseitem",
                    ),
                ),
            ],
            options={
                "verbose_name": "Часть мутанта",
                "verbose_name_plural": "Части мутантов",
            },
            bases=("game_parser.baseitem",),
        ),
        migrations.CreateModel(
            name="Other",
            fields=[
                (
                    "baseitem_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="game_parser.baseitem",
                    ),
                ),
            ],
            options={
                "verbose_name": "Прочий предмет",
                "verbose_name_plural": "Прочее",
            },
            bases=("game_parser.baseitem",),
        ),
        migrations.CreateModel(
            name="Outfit",
            fields=[
                (
                    "baseitem_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="game_parser.baseitem",
                    ),
                ),
                (
                    "burn_protection",
                    models.DecimalField(
                        decimal_places=4,
                        max_digits=7,
                        verbose_name="Защита от огня?",
                    ),
                ),
                (
                    "strike_protection",
                    models.DecimalField(
                        decimal_places=4,
                        max_digits=7,
                        verbose_name="Защита от ???",
                    ),
                ),
                (
                    "shock_protection",
                    models.DecimalField(
                        decimal_places=4,
                        max_digits=7,
                        verbose_name="Защита от ???",
                    ),
                ),
                (
                    "wound_protection",
                    models.DecimalField(
                        decimal_places=4,
                        max_digits=7,
                        verbose_name="Защита от ???",
                    ),
                ),
                (
                    "radiation_protection",
                    models.DecimalField(
                        decimal_places=4,
                        max_digits=7,
                        verbose_name="Защита от радиации",
                    ),
                ),
                (
                    "telepatic_protection",
                    models.DecimalField(
                        decimal_places=4,
                        max_digits=7,
                        verbose_name="Защита от телепатии",
                    ),
                ),
                (
                    "chemical_burn_protection",
                    models.DecimalField(
                        decimal_places=4,
                        max_digits=7,
                        verbose_name="Защита от химии",
                    ),
                ),
                (
                    "explosion_protection",
                    models.DecimalField(
                        decimal_places=4,
                        max_digits=7,
                        verbose_name="Защита от взрыва",
                    ),
                ),
                (
                    "fire_wound_protection",
                    models.DecimalField(
                        decimal_places=4,
                        max_digits=7,
                        verbose_name="Защита от огня?",
                    ),
                ),
            ],
            options={
                "verbose_name": "Броня",
                "verbose_name_plural": "Броня",
            },
            bases=("game_parser.baseitem",),
        ),
        migrations.CreateModel(
            name="MoneyReward",
            fields=[
                (
                    "basescriptreward_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="game_parser.basescriptreward",
                    ),
                ),
                (
                    "count",
                    models.DecimalField(decimal_places=2, max_digits=20, null=True),
                ),
                ("raw_count", models.CharField(max_length=512)),
            ],
            options={
                "verbose_name": "Выдача денег в скрипте",
            },
            bases=("game_parser.basescriptreward",),
        ),
        migrations.CreateModel(
            name="Buy",
            fields=[
                (
                    "basetrade_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="game_parser.basetrade",
                    ),
                ),
            ],
            options={
                "verbose_name": "Покупка",
            },
            bases=("game_parser.basetrade",),
        ),
        migrations.CreateModel(
            name="Sell",
            fields=[
                (
                    "basetrade_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="game_parser.basetrade",
                    ),
                ),
            ],
            options={
                "verbose_name": "Продажа",
            },
            bases=("game_parser.basetrade",),
        ),
        migrations.CreateModel(
            name="CustomSpawnItem",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "section_name",
                    models.CharField(max_length=255, verbose_name="Название секции"),
                ),
                ("name", models.CharField(max_length=255, verbose_name="Название")),
                ("custom_data", models.TextField(null=True)),
                (
                    "character_profile_str",
                    models.CharField(
                        max_length=255,
                        null=True,
                        verbose_name="Профиль сталкера",
                    ),
                ),
                ("spec_rank_str", models.CharField(max_length=255, null=True)),
                ("community_str", models.CharField(max_length=255, null=True)),
                ("visual_str", models.CharField(max_length=255, null=True)),
                (
                    "item",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="game_parser.baseitem",
                        verbose_name="Предмет",
                    ),
                ),
                (
                    "custom_inventory_box",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="game_parser.inventorybox",
                        verbose_name="Тайник(рюкзак?)",
                    ),
                ),
                (
                    "npc_logic",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="game_parser.npclogicconfig",
                        verbose_name="Конфиг логики НПС",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Anomaly",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("section_name", models.CharField(max_length=255, unique=True)),
                ("class_name", models.CharField(max_length=255)),
                ("visual_str", models.CharField(max_length=255, null=True)),
                ("hit_type", models.CharField(max_length=255, null=True)),
                (
                    "article",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="game_parser.encyclopediaarticle",
                    ),
                ),
            ],
            options={
                "verbose_name": "Аномалия",
                "verbose_name_plural": "Аномалии",
            },
        ),
        migrations.AddField(
            model_name="encyclopediaarticle",
            name="group",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="game_parser.encyclopediagroup",
            ),
        ),
        migrations.CreateModel(
            name="GameStoryId",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "story_id",
                    models.PositiveSmallIntegerField(
                        unique=True,
                        verbose_name="id в игре",
                    ),
                ),
                (
                    "section_name",
                    models.CharField(
                        max_length=255,
                        unique=True,
                        verbose_name="Название секции",
                    ),
                ),
                (
                    "item",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="game_parser.baseitem",
                        verbose_name="Предмет",
                    ),
                ),
                (
                    "spawn_section_custom",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="game_parser.customspawnitem",
                        verbose_name="Кастоная секция спавна",
                    ),
                ),
            ],
            options={
                "verbose_name": "Связь id с секциями",
                "verbose_name_plural": "Связи id с секциями",
            },
        ),
        migrations.CreateModel(
            name="CycleTaskVendor",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "game_story_id_raw",
                    models.PositiveSmallIntegerField(
                        unique=True,
                        verbose_name="game id",
                    ),
                ),
                (
                    "vendor_id",
                    models.PositiveSmallIntegerField(
                        unique=True,
                        verbose_name="game id",
                    ),
                ),
                (
                    "game_story_id",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="game_parser.gamestoryid",
                        unique=True,
                    ),
                ),
            ],
            options={
                "verbose_name": "ID НПС, выдающий циклические задания",
                "verbose_name_plural": "ID Выдающих ЦЗ НПС",
            },
        ),
        migrations.AddField(
            model_name="encyclopediaarticle",
            name="icon",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="+",
                to="game_parser.icon",
            ),
        ),
        migrations.CreateModel(
            name="InfoPortion",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "game_id",
                    models.CharField(
                        max_length=512,
                        unique=True,
                        verbose_name="Игровой идентификатор",
                    ),
                ),
                (
                    "article_raw",
                    models.CharField(
                        max_length=256,
                        null=True,
                        verbose_name="Статьи(сырые id)",
                    ),
                ),
                (
                    "disable_raw",
                    models.TextField(null=True, verbose_name="Отключаемые инфопоршни"),
                ),
                (
                    "task_raw",
                    models.TextField(null=True, verbose_name="Задание(сырое)"),
                ),
                (
                    "actions_raw",
                    models.TextField(
                        null=True,
                        verbose_name="Запускаемые функции(сырые)",
                    ),
                ),
                (
                    "task",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="game_parser.gametask",
                        verbose_name="Задание",
                    ),
                ),
            ],
            options={
                "verbose_name": "Инфопоршень",
                "verbose_name_plural": "Инфопоршни",
            },
        ),
        migrations.CreateModel(
            name="Dialog",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "game_id",
                    models.CharField(max_length=512, unique=True, verbose_name="id"),
                ),
                (
                    "has_info_raw",
                    models.TextField(
                        null=True,
                        verbose_name="id требуемых инфопоршней",
                    ),
                ),
                ("dont_has_info_raw", models.TextField(null=True)),
                ("give_info_raw", models.TextField(null=True)),
                ("actions_raw", models.TextField(null=True)),
                ("precondition_raw", models.TextField(null=True)),
                ("init_func_raw", models.TextField(null=True)),
                (
                    "comments_raw",
                    models.TextField(null=True, verbose_name="комментарии из xml"),
                ),
                (
                    "dont_has_info",
                    models.ManyToManyField(
                        related_name="close_dialogs",
                        to="game_parser.infoportion",
                        verbose_name="Информация, блокирующая диалог",
                    ),
                ),
                (
                    "give_info",
                    models.ManyToManyField(
                        related_name="activated_in_dialogs",
                        to="game_parser.infoportion",
                        verbose_name="Информация, получаемая за диалог",
                    ),
                ),
                (
                    "has_info",
                    models.ManyToManyField(
                        related_name="open_dialogs",
                        to="game_parser.infoportion",
                        verbose_name="Информация, нужная для получения диалога",
                    ),
                ),
            ],
            options={
                "verbose_name": "Диалог",
                "verbose_name_plural": "Диалоги",
            },
        ),
        migrations.CreateModel(
            name="LocationMapInfo",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255, verbose_name="Название")),
                (
                    "texture_raw",
                    models.CharField(
                        max_length=255,
                        null=True,
                        verbose_name="Название картинки с картой",
                    ),
                ),
                (
                    "bound_rect_raw",
                    models.CharField(
                        max_length=255,
                        null=True,
                        verbose_name="Границы локации(границы картинки?)",
                    ),
                ),
                (
                    "global_rect_raw",
                    models.CharField(
                        max_length=255,
                        null=True,
                        verbose_name="Границы локации(относительно глобальной карты?)",
                    ),
                ),
                (
                    "weathers",
                    models.CharField(
                        max_length=255,
                        null=True,
                        verbose_name="Информация о погоде",
                    ),
                ),
                (
                    "music_tracks",
                    models.CharField(
                        max_length=255,
                        null=True,
                        verbose_name="Информация о фоновой музыке",
                    ),
                ),
                (
                    "map_image",
                    models.ImageField(null=True, upload_to="", verbose_name="Карта"),
                ),
                (
                    "location",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="game_parser.location",
                        verbose_name="локация",
                    ),
                ),
            ],
            options={
                "verbose_name": "Дополнительная информация о локации",
                "verbose_name_plural": "Дополнительные данные о локациях",
            },
        ),
        migrations.CreateModel(
            name="QuestRandomReward",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "index",
                    models.PositiveSmallIntegerField(
                        null=True,
                        unique=True,
                        verbose_name="Индекс",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        max_length=255,
                        unique=True,
                        verbose_name="Игровое название",
                    ),
                ),
                (
                    "caption",
                    models.CharField(
                        max_length=255,
                        null=True,
                        verbose_name="Человекочитабельное название(из комментария)",
                    ),
                ),
                (
                    "possible_items_str",
                    models.CharField(
                        max_length=2000,
                        verbose_name="Названия возможных предметов",
                    ),
                ),
                (
                    "icon",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="game_parser.icon",
                        verbose_name="Иконка",
                    ),
                ),
                (
                    "possible_items",
                    models.ManyToManyField(
                        to="game_parser.baseitem",
                        verbose_name="Возможные предметы",
                    ),
                ),
                (
                    "name_translation",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="game_parser.translation",
                        verbose_name="Перевод названия",
                    ),
                ),
            ],
            options={
                "verbose_name": "Случайная награда за квест",
                "verbose_name_plural": "Случайные награды за квесты",
            },
        ),
        migrations.CreateModel(
            name="Recept",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("anomaly_id", models.CharField(max_length=255, unique=True)),
                ("anomaly_name", models.CharField(max_length=255)),
                ("condition_raw", models.CharField(max_length=255)),
                ("components_raw", models.CharField(max_length=255)),
                ("cel_raw", models.CharField(max_length=255)),
                ("v_udachi", models.DecimalField(decimal_places=3, max_digits=6)),
                ("v_virogd", models.DecimalField(decimal_places=3, max_digits=6)),
                ("v_ottorg", models.DecimalField(decimal_places=3, max_digits=6)),
                ("vremya_day", models.CharField(max_length=255)),
                ("vremya_hour", models.CharField(max_length=255)),
                ("vremya_min", models.CharField(max_length=255)),
                ("remove_anomaly", models.BooleanField()),
                ("not_for_mutator", models.BooleanField()),
                ("info_raw", models.CharField(max_length=255, null=True)),
                (
                    "cel",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="cooking_in_recepts",
                        to="game_parser.baseitem",
                    ),
                ),
                (
                    "components",
                    models.ManyToManyField(
                        related_name="use_in_recepts",
                        to="game_parser.baseitem",
                    ),
                ),
                (
                    "condition",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="opening_recepts",
                        to="game_parser.infoportion",
                    ),
                ),
                (
                    "info",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="get_from_recept",
                        to="game_parser.infoportion",
                    ),
                ),
            ],
            options={
                "verbose_name": "Рецепт",
                "verbose_name_plural": "Рецепты",
            },
        ),
        migrations.CreateModel(
            name="ScriptFunction",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=512, verbose_name="Название")),
                (
                    "namespace",
                    models.CharField(max_length=512, verbose_name="Название файла"),
                ),
                ("raw_nested_function", models.TextField(null=True)),
                (
                    "dialog",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="actions",
                        to="game_parser.dialog",
                    ),
                ),
                (
                    "nested_function",
                    models.ManyToManyField(
                        to="game_parser.scriptfunction",
                        verbose_name="Функции, вызываемые в этой",
                    ),
                ),
            ],
            options={
                "verbose_name": "Функция из скриптов",
            },
        ),
        migrations.AddField(
            model_name="infoportion",
            name="actions",
            field=models.ManyToManyField(
                related_name="starts_infoportions",
                to="game_parser.scriptfunction",
                verbose_name="Функции,запускаемые инфопоршнем",
            ),
        ),
        migrations.AddField(
            model_name="dialog",
            name="init_func",
            field=models.ManyToManyField(
                related_name="dialogs_inited",
                to="game_parser.scriptfunction",
                verbose_name="функция, инициализирующая диалог",
            ),
        ),
        migrations.AddField(
            model_name="dialog",
            name="precondition",
            field=models.ManyToManyField(
                related_name="dialogs_required_function",
                to="game_parser.scriptfunction",
                verbose_name="Функции-условия для диалога",
            ),
        ),
        migrations.AddField(
            model_name="basescriptreward",
            name="function",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="rewards",
                to="game_parser.scriptfunction",
            ),
        ),
        migrations.CreateModel(
            name="SpawnItem",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "section_name",
                    models.CharField(max_length=255, verbose_name="Название секции"),
                ),
                ("name", models.CharField(max_length=255, verbose_name="Название")),
                (
                    "position_raw",
                    models.CharField(max_length=300, verbose_name="Координаты(строка)"),
                ),
                (
                    "spawn_id",
                    models.PositiveBigIntegerField(unique=True, verbose_name="ID"),
                ),
                (
                    "story_id",
                    models.PositiveBigIntegerField(
                        null=True,
                        unique=True,
                        verbose_name="story_id",
                    ),
                ),
                (
                    "spawn_story_id",
                    models.PositiveBigIntegerField(
                        null=True,
                        unique=True,
                        verbose_name="spawn_story_id",
                    ),
                ),
                (
                    "game_vertex_id",
                    models.PositiveBigIntegerField(verbose_name="vertexID"),
                ),
                (
                    "location_txt",
                    models.CharField(max_length=255, verbose_name="локация"),
                ),
                ("custom_data", models.TextField(null=True)),
                (
                    "character_profile_str",
                    models.CharField(
                        blank=True,
                        max_length=255,
                        null=True,
                        verbose_name="Профиль сталкера",
                    ),
                ),
                (
                    "item",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="game_parser.baseitem",
                        verbose_name="Предмет",
                    ),
                ),
                (
                    "location",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="spawn_items",
                        to="game_parser.location",
                    ),
                ),
                (
                    "npc_logic",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="game_parser.npclogicconfig",
                        verbose_name="Конфиг логики НПС",
                    ),
                ),
            ],
            options={
                "verbose_name": "Секция спавна",
                "verbose_name_plural": "Секции спавна",
            },
        ),
        migrations.AddField(
            model_name="gamestoryid",
            name="spawn_section",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="game_parser.spawnitem",
                verbose_name="Секция спавна",
            ),
        ),
        migrations.CreateModel(
            name="CampInfo",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("type", models.CharField(max_length=128, null=True)),
                ("capacity", models.PositiveIntegerField(null=True)),
                ("cond_raw", models.CharField(max_length=512, null=True)),
                ("communities_raw", models.CharField(max_length=512, null=True)),
                ("stay_str", models.CharField(max_length=32, null=True)),
                ("groups_str", models.CharField(max_length=32, null=True)),
                ("communities", models.ManyToManyField(to="game_parser.community")),
                (
                    "spawn_item",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="game_parser.spawnitem",
                        unique=True,
                    ),
                ),
            ],
            options={
                "verbose_name": "Лагерь НПС/мутантов",
                "verbose_name_plural": "Лагеря НПС/мутантов",
            },
        ),
        migrations.CreateModel(
            name="StalkerSection",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("section_name", models.CharField(max_length=255, unique=True)),
                ("character_profile_str", models.CharField(max_length=128, null=True)),
                ("spec_rank_str", models.CharField(max_length=128, null=True)),
                ("community_str", models.CharField(max_length=128, null=True)),
                ("custom_data_path", models.CharField(max_length=512, null=True)),
                (
                    "community",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="game_parser.community",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="SingleStalkerSpawnItem",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("character_profile_raw", models.CharField(max_length=512)),
                (
                    "spawn_item",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="game_parser.spawnitem",
                        unique=True,
                    ),
                ),
                (
                    "stalker_section",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="game_parser.stalkersection",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Respawn",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("respawn_section_raw", models.CharField(max_length=512, null=True)),
                ("max_spawn_raw", models.CharField(max_length=128, null=True)),
                ("idle_spawn_raw", models.CharField(max_length=128, null=True)),
                ("conditions_raw", models.CharField(max_length=128, null=True)),
                ("max_spawn", models.PositiveIntegerField(null=True)),
                (
                    "spawn_item",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="game_parser.spawnitem",
                        unique=True,
                    ),
                ),
                (
                    "respawn_section",
                    models.ManyToManyField(to="game_parser.stalkersection"),
                ),
            ],
        ),
        migrations.CreateModel(
            name="TaskObjective",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "text_id_raw",
                    models.CharField(
                        max_length=256,
                        null=True,
                        verbose_name="Сырой текст",
                    ),
                ),
                (
                    "icon_raw",
                    models.CharField(
                        max_length=512,
                        null=True,
                        verbose_name="Название иконки",
                    ),
                ),
                (
                    "article_id_raw",
                    models.CharField(
                        max_length=256,
                        null=True,
                        verbose_name="Статья(энциклопедия)",
                    ),
                ),
                (
                    "function_complete_raw",
                    models.TextField(
                        null=True,
                        verbose_name="Функция, вызываемая при завершении",
                    ),
                ),
                (
                    "infoportion_complete_raw",
                    models.TextField(
                        null=True,
                        verbose_name="Инфопоршень, устанавлеваемый при завершении",
                    ),
                ),
                (
                    "infoportion_set_complete_raw",
                    models.TextField(
                        null=True,
                        verbose_name="Инфопоршень, устанавлеваемый при завершении",
                    ),
                ),
                ("object_story_id_raw", models.TextField(null=True)),
                (
                    "function_fail_raw",
                    models.TextField(
                        null=True,
                        verbose_name="Функция, вызываемая при провале",
                    ),
                ),
                (
                    "infoportion_set_fail_raw",
                    models.TextField(
                        null=True,
                        verbose_name="Инфопоршень, устанавлеваемый при провале",
                    ),
                ),
                (
                    "function_call_complete_raw",
                    models.TextField(
                        null=True,
                        verbose_name="Функция, вызываемая при завершении",
                    ),
                ),
                (
                    "article",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="task_objectives",
                        to="game_parser.encyclopediaarticle",
                        verbose_name="Статья",
                    ),
                ),
                (
                    "function_call_complete",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="call_on_complete_task_objective",
                        to="game_parser.scriptfunction",
                        verbose_name="Функция, вызываемая при завершении",
                    ),
                ),
                (
                    "function_complete",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="on_complete_task_objective",
                        to="game_parser.scriptfunction",
                        verbose_name="Функция, вызываемая при завершении",
                    ),
                ),
                (
                    "function_fail",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="set_on_fail_task_objective",
                        to="game_parser.scriptfunction",
                        verbose_name="Функция, вызываемая при провале",
                    ),
                ),
                (
                    "icon",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="game_parser.icon",
                        verbose_name="Иконка",
                    ),
                ),
                (
                    "infoportion_complete",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="on_complete_task_objective",
                        to="game_parser.infoportion",
                        verbose_name="Инфопоршень, устанавлеваемый при завершении",
                    ),
                ),
                (
                    "infoportion_set_complete",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="set_on_complete_task_objective",
                        to="game_parser.infoportion",
                        verbose_name="Инфопоршень, устанавлеваемый при завершении",
                    ),
                ),
                (
                    "infoportion_set_fail",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="set_on_fail_task_objective",
                        to="game_parser.infoportion",
                        verbose_name="Инфопоршень, устанавлеваемый при провале",
                    ),
                ),
                (
                    "task",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="game_parser.gametask",
                        verbose_name="Задание",
                    ),
                ),
                (
                    "text",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="game_parser.translation",
                        verbose_name="Текст(перевод)",
                    ),
                ),
            ],
            options={
                "verbose_name": "Цель сюжетного задания",
                "verbose_name_plural": "Цели сюжетных заданий",
            },
        ),
        migrations.AddField(
            model_name="npclogicconfig",
            name="trade_config",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="game_parser.trader",
                verbose_name="Конфиг торговли",
            ),
        ),
        migrations.AddField(
            model_name="basetrade",
            name="trader",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="game_parser.trader",
                verbose_name="Торговец",
            ),
        ),
        migrations.CreateModel(
            name="Rank",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(max_length=128, unique=True, verbose_name="Код"),
                ),
                (
                    "type",
                    models.CharField(
                        choices=[("monster", "Мутант"), ("stalker", "Сталкер")],
                        max_length=128,
                        verbose_name="Тип",
                    ),
                ),
                (
                    "min_score",
                    models.PositiveSmallIntegerField(
                        null=True,
                        verbose_name="Нижний порог ранга",
                    ),
                ),
                (
                    "max_score",
                    models.PositiveSmallIntegerField(
                        null=True,
                        verbose_name="Верхний порог ранга",
                    ),
                ),
                (
                    "translation",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="game_parser.translation",
                        verbose_name="Название",
                    ),
                ),
            ],
            options={
                "verbose_name": "Ранг сталкера",
                "verbose_name_plural": "Ранги сталкеров",
            },
        ),
        migrations.CreateModel(
            name="MapLocationType",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("hint_raw", models.CharField(max_length=256, null=True)),
                ("location_type", models.CharField(max_length=256)),
                (
                    "objective",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="game_parser.taskobjective",
                    ),
                ),
                (
                    "hint",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="game_parser.translation",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="location",
            name="name_translation",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="+",
                to="game_parser.translation",
                verbose_name="Перевод названия",
            ),
        ),
        migrations.AddField(
            model_name="gametask",
            name="title",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="+",
                to="game_parser.translation",
                verbose_name="Заголовок(перевод)",
            ),
        ),
        migrations.AddField(
            model_name="encyclopediagroup",
            name="name_translation",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="+",
                to="game_parser.translation",
            ),
        ),
        migrations.AddField(
            model_name="encyclopediaarticle",
            name="name_translation",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="+",
                to="game_parser.translation",
            ),
        ),
        migrations.AddField(
            model_name="encyclopediaarticle",
            name="text_translation",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="+",
                to="game_parser.translation",
            ),
        ),
        migrations.CreateModel(
            name="DialogPhrase",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "local_id",
                    models.CharField(max_length=10, verbose_name="id фразы в диалоге"),
                ),
                (
                    "text_id_raw",
                    models.CharField(
                        max_length=256,
                        null=True,
                        verbose_name="id текста",
                    ),
                ),
                (
                    "next_ids_raw",
                    models.CharField(
                        max_length=512,
                        verbose_name="id следующих фраз диалога",
                    ),
                ),
                (
                    "give_info_raw",
                    models.TextField(
                        null=True,
                        verbose_name="Получение инфопоршня(id)",
                    ),
                ),
                (
                    "actions_raw",
                    models.TextField(null=True, verbose_name="Запуск действий(id)"),
                ),
                ("precondition_raw", models.TextField(null=True)),
                ("has_info_raw", models.TextField(null=True)),
                ("dont_has_info_raw", models.TextField(null=True)),
                ("disable_info_raw", models.TextField(null=True)),
                ("disable_raw", models.TextField(null=True)),
                (
                    "dialog",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="game_parser.dialog",
                        verbose_name="Диалог",
                    ),
                ),
                (
                    "previous",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="game_parser.dialogphrase",
                        verbose_name="Предыдущая фраза",
                    ),
                ),
                (
                    "disable",
                    models.ManyToManyField(
                        related_name="disable_phrases",
                        to="game_parser.infoportion",
                        verbose_name="Убираемые инфопоршни?",
                    ),
                ),
                (
                    "disable_info",
                    models.ManyToManyField(
                        related_name="disable_info_in_phrases",
                        to="game_parser.infoportion",
                        verbose_name="Убираемые инфопоршни?",
                    ),
                ),
                (
                    "don_has_info",
                    models.ManyToManyField(
                        related_name="close_phrases",
                        to="game_parser.infoportion",
                        verbose_name="Информация, блокирующая фразу диалог",
                    ),
                ),
                (
                    "give_info",
                    models.ManyToManyField(
                        related_name="activated_in_phrases",
                        to="game_parser.infoportion",
                        verbose_name="Информация, получаемая за фразу диалог",
                    ),
                ),
                (
                    "has_info",
                    models.ManyToManyField(
                        related_name="open_phrases",
                        to="game_parser.infoportion",
                        verbose_name="Информация, нужная для получения фразы диалога",
                    ),
                ),
                (
                    "actions",
                    models.ManyToManyField(
                        related_name="starts_phrases",
                        to="game_parser.scriptfunction",
                        verbose_name="Функции,запускаемые диалогом",
                    ),
                ),
                (
                    "precondition",
                    models.ManyToManyField(
                        related_name="phrase_required_function",
                        to="game_parser.scriptfunction",
                        verbose_name="Функции-условия для фразы диалога",
                    ),
                ),
                (
                    "text",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="game_parser.translation",
                        verbose_name="Перевод текста",
                    ),
                ),
            ],
            options={
                "verbose_name": "Фраза диалога",
                "verbose_name_plural": "Фразы диалогов",
            },
        ),
        migrations.CreateModel(
            name="CyclicQuest",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("eliminate_lager", "Уничтожить лагерь"),
                            ("chain", "Цепочка"),
                            ("kill_stalker", "Убить сталкера"),
                            ("monster_part", "Часть мутанта"),
                            ("artefact", "Принести артефакт"),
                            ("find_item", "Принести предмет"),
                            ("defend_lager", "Защитить лагерь"),
                        ],
                        max_length=255,
                        verbose_name="Тип задания(тип цели задания)",
                    ),
                ),
                (
                    "game_code",
                    models.CharField(
                        max_length=255,
                        unique=True,
                        verbose_name="Игровой код в файле",
                    ),
                ),
                (
                    "giver_code_local",
                    models.CharField(
                        max_length=255,
                        null=True,
                        verbose_name="Код квестодателя(локальный)",
                    ),
                ),
                (
                    "giver_code_global",
                    models.CharField(
                        max_length=255,
                        null=True,
                        verbose_name="Код квестодателя(глобальный)",
                    ),
                ),
                (
                    "reward_item_string",
                    models.TextField(null=True, verbose_name="Награда. Предметы(-ы)"),
                ),
                (
                    "reward_info_string",
                    models.CharField(
                        max_length=255,
                        null=True,
                        verbose_name="Награда. Информация",
                    ),
                ),
                (
                    "random_rewards_string",
                    models.CharField(
                        max_length=255,
                        null=True,
                        verbose_name="Награда. Случайная",
                    ),
                ),
                (
                    "prior",
                    models.IntegerField(
                        default=0,
                        verbose_name=" Типа очередность задания",
                    ),
                ),
                (
                    "target_str",
                    models.CharField(
                        max_length=255,
                        null=True,
                        verbose_name="Цель задания",
                    ),
                ),
                (
                    "once",
                    models.BooleanField(
                        default=False,
                        verbose_name="Одноразовый ли квест",
                    ),
                ),
                (
                    "condlist_str",
                    models.CharField(
                        max_length=1000,
                        null=True,
                        verbose_name="Условия для возможности получения задания",
                    ),
                ),
                (
                    "target_count",
                    models.PositiveIntegerField(
                        null=True,
                        verbose_name="Кол-во нужных предметов",
                    ),
                ),
                (
                    "reward_money",
                    models.PositiveIntegerField(
                        null=True,
                        verbose_name="Награда. Деньги",
                    ),
                ),
                (
                    "map_location",
                    models.CharField(
                        max_length=255,
                        null=True,
                        verbose_name="Цель: на карте",
                    ),
                ),
                (
                    "target_cond_str",
                    models.CharField(
                        max_length=255,
                        null=True,
                        verbose_name="Цель: состояние премдмета ",
                    ),
                ),
                (
                    "hide_reward",
                    models.BooleanField(
                        default=False,
                        verbose_name="Скрытая ли награда",
                    ),
                ),
                (
                    "reward_treasure",
                    models.BooleanField(default=False, verbose_name="Награда. Тайник"),
                ),
                (
                    "reward_dialog_str",
                    models.CharField(
                        max_length=512,
                        null=True,
                        verbose_name="Награда. Диалог(?)",
                    ),
                ),
                (
                    "defend_target_str",
                    models.CharField(
                        max_length=255,
                        null=True,
                        verbose_name="Цель. Защита(?)",
                    ),
                ),
                (
                    "reward_relation_str",
                    models.CharField(
                        max_length=255,
                        null=True,
                        verbose_name="Награда. Репутация/отношения",
                    ),
                ),
                (
                    "text_raw",
                    models.CharField(
                        max_length=255,
                        null=True,
                        verbose_name="Код перевода текста задания",
                    ),
                ),
                (
                    "target_camp",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="game_parser.campinfo",
                        verbose_name="Цель - лагерь",
                    ),
                ),
                (
                    "target_item",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="quests_when_needed",
                        to="game_parser.baseitem",
                        verbose_name="Целевой предмет",
                    ),
                ),
                (
                    "vendor",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="game_parser.cycletaskvendor",
                        verbose_name="Персонаж квестодатель",
                    ),
                ),
                (
                    "target_camp_to_defeat",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="game_parser.spawnitem",
                        verbose_name="Лагерь нужно защитить",
                    ),
                ),
                (
                    "target_camp_to_destroy",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="game_parser.spawnitem",
                        verbose_name="Лагерь нужно уничтожить",
                    ),
                ),
                (
                    "target_stalker",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="game_parser.stalkersection",
                        verbose_name="Сталкер цель",
                    ),
                ),
                (
                    "text",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="game_parser.translation",
                        verbose_name="Текст задания",
                    ),
                ),
            ],
            options={
                "verbose_name": "Циклический квест",
                "verbose_name_plural": "Циклические квесты",
            },
        ),
        migrations.AddField(
            model_name="community",
            name="translation",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="+",
                to="game_parser.translation",
                verbose_name="Перевод названия",
            ),
        ),
        migrations.AddField(
            model_name="baseitem",
            name="description_translation",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="+",
                to="game_parser.translation",
                verbose_name="Перевод описания",
            ),
        ),
        migrations.AddField(
            model_name="baseitem",
            name="name_translation",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="+",
                to="game_parser.translation",
                verbose_name="Перевод названия",
            ),
        ),
        migrations.CreateModel(
            name="Treasure",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "target",
                    models.CharField(
                        max_length=10,
                        verbose_name="spawn_id для поиска в спавне",
                    ),
                ),
                (
                    "name_str",
                    models.CharField(
                        max_length=255,
                        verbose_name="Название(код перевода)",
                    ),
                ),
                (
                    "description_str",
                    models.CharField(
                        max_length=255,
                        verbose_name="Описание(код перевода)",
                    ),
                ),
                (
                    "items_str",
                    models.CharField(
                        max_length=1000,
                        verbose_name="Предметы в тайнике(строкой)",
                    ),
                ),
                (
                    "condlist_str",
                    models.CharField(max_length=1000, verbose_name="Условия"),
                ),
                (
                    "custom_name",
                    models.CharField(
                        max_length=255,
                        null=True,
                        verbose_name="Название(2)(код перевода)",
                    ),
                ),
                (
                    "custom_name_translation",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="game_parser.translation",
                        verbose_name="Перевод названия",
                    ),
                ),
                (
                    "description_translation",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="game_parser.translation",
                        verbose_name="Перевод описания",
                    ),
                ),
                (
                    "spawn_item",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="treasures",
                        to="game_parser.spawnitem",
                        verbose_name="Секция спавна",
                    ),
                ),
            ],
            options={
                "verbose_name": "Тайник",
                "verbose_name_plural": "Тайники",
            },
        ),
        migrations.CreateModel(
            name="ItemInTreasure",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "count",
                    models.PositiveIntegerField(
                        default=1,
                        verbose_name="Кол-во предметов",
                    ),
                ),
                (
                    "item",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="has_in_treasures",
                        to="game_parser.baseitem",
                        verbose_name="Предмет",
                    ),
                ),
                (
                    "treasure",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="items",
                        to="game_parser.treasure",
                        verbose_name="Тайник",
                    ),
                ),
            ],
            options={
                "verbose_name": "Предмет в тайнике",
                "verbose_name_plural": "Предметы в тайниках",
            },
        ),
        migrations.AddField(
            model_name="gamestoryid",
            name="treasure",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="game_parser.treasure",
                verbose_name="Тайник",
            ),
        ),
        migrations.CreateModel(
            name="GrenadeLauncher",
            fields=[
                (
                    "addon_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="game_parser.addon",
                    ),
                ),
                (
                    "ammo_class_str",
                    models.CharField(
                        max_length=255,
                        null=True,
                        verbose_name="Боеприпас",
                    ),
                ),
            ],
            options={
                "verbose_name": "Подствольный гранатомёт",
                "verbose_name_plural": "Подствольные гранатомёты",
            },
            bases=("game_parser.addon",),
        ),
        migrations.CreateModel(
            name="Scope",
            fields=[
                (
                    "addon_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="game_parser.addon",
                    ),
                ),
            ],
            options={
                "verbose_name": "Прицел",
                "verbose_name_plural": "Прицелы",
            },
            bases=("game_parser.addon",),
        ),
        migrations.CreateModel(
            name="Silencer",
            fields=[
                (
                    "addon_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="game_parser.addon",
                    ),
                ),
                (
                    "condition_shot_dec",
                    models.DecimalField(
                        decimal_places=8,
                        max_digits=12,
                        null=True,
                        verbose_name="знос за 1 выстрел",
                    ),
                ),
            ],
            options={
                "verbose_name": "Глушитель",
                "verbose_name_plural": "Глушители",
            },
            bases=("game_parser.addon",),
        ),
        migrations.CreateModel(
            name="CapsAnom",
            fields=[
                (
                    "artefact_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="game_parser.artefact",
                    ),
                ),
            ],
            options={
                "verbose_name": "Капсула аномалии",
                "verbose_name_plural": "Капсулы аномалий",
            },
            bases=("game_parser.artefact",),
        ),
        migrations.CreateModel(
            name="MonsterEmbrion",
            fields=[
                (
                    "artefact_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="game_parser.artefact",
                    ),
                ),
            ],
            options={
                "verbose_name": "Эмбрион мутанта",
                "verbose_name_plural": "Эмбрионы мутантов",
            },
            bases=("game_parser.artefact",),
        ),
        migrations.CreateModel(
            name="TrueArtefact",
            fields=[
                (
                    "artefact_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="game_parser.artefact",
                    ),
                ),
                (
                    "inventory_radiation",
                    models.DecimalField(
                        decimal_places=6,
                        max_digits=10,
                        null=True,
                        verbose_name="Радиоактивность(из рюкзака)",
                    ),
                ),
                (
                    "health_restore_speed",
                    models.DecimalField(
                        decimal_places=6,
                        max_digits=10,
                        null=True,
                        verbose_name="Восстановление здоровья",
                    ),
                ),
                (
                    "burn_immunity",
                    models.DecimalField(
                        decimal_places=3,
                        max_digits=5,
                        null=True,
                        verbose_name="Ожог",
                    ),
                ),
                (
                    "strike_immunity",
                    models.DecimalField(
                        decimal_places=3,
                        max_digits=5,
                        null=True,
                        verbose_name="Удар",
                    ),
                ),
                (
                    "shock_immunity",
                    models.DecimalField(
                        decimal_places=3,
                        max_digits=5,
                        null=True,
                        verbose_name="Электрошок",
                    ),
                ),
                (
                    "wound_immunity",
                    models.DecimalField(
                        decimal_places=3,
                        max_digits=5,
                        null=True,
                        verbose_name="Разрыв",
                    ),
                ),
                (
                    "radiation_immunity",
                    models.DecimalField(
                        decimal_places=3,
                        max_digits=5,
                        null=True,
                        verbose_name="защита от радиации",
                    ),
                ),
                (
                    "telepatic_immunity",
                    models.DecimalField(
                        decimal_places=3,
                        max_digits=5,
                        null=True,
                        verbose_name="Телепатии",
                    ),
                ),
                (
                    "chemical_burn_immunity",
                    models.DecimalField(
                        decimal_places=3,
                        max_digits=5,
                        null=True,
                        verbose_name="Химический ожог",
                    ),
                ),
                (
                    "explosion_immunity",
                    models.DecimalField(
                        decimal_places=3,
                        max_digits=5,
                        null=True,
                        verbose_name="Взрыв",
                    ),
                ),
                (
                    "fire_wound_immunity",
                    models.DecimalField(
                        decimal_places=3,
                        max_digits=5,
                        null=True,
                        verbose_name="Пулестойкость",
                    ),
                ),
                (
                    "power_restore_speed",
                    models.DecimalField(
                        decimal_places=3,
                        max_digits=5,
                        null=True,
                        verbose_name="Восстановление сил",
                    ),
                ),
                (
                    "additional_weight",
                    models.DecimalField(
                        decimal_places=3,
                        max_digits=5,
                        null=True,
                        verbose_name="Переносимый вес",
                    ),
                ),
                (
                    "radiation_restore_speed",
                    models.DecimalField(
                        decimal_places=3,
                        max_digits=5,
                        null=True,
                        verbose_name="Вывод радиации из организма",
                    ),
                ),
                (
                    "bleeding_restore_speed",
                    models.DecimalField(
                        decimal_places=3,
                        max_digits=5,
                        null=True,
                        verbose_name="Кровотечение",
                    ),
                ),
                (
                    "psy_health_restore_speed",
                    models.DecimalField(
                        decimal_places=5,
                        max_digits=7,
                        null=True,
                        verbose_name="Пси-здоровье?",
                    ),
                ),
                (
                    "satiety_restore_speed",
                    models.DecimalField(
                        decimal_places=5,
                        max_digits=7,
                        null=True,
                        verbose_name="Насыщение",
                    ),
                ),
                (
                    "jump_speed_delta",
                    models.DecimalField(
                        decimal_places=3,
                        max_digits=5,
                        null=True,
                        verbose_name="Прыжок",
                    ),
                ),
            ],
            options={
                "verbose_name": "Артефакт",
                "verbose_name_plural": "Артефакты",
            },
            bases=("game_parser.artefact",),
        ),
        migrations.AddField(
            model_name="encyclopediaarticle",
            name="artefact",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="articles",
                to="game_parser.artefact",
            ),
        ),
        migrations.CreateModel(
            name="Monster",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("section_name", models.CharField(max_length=255, unique=True)),
                ("short_name", models.CharField(max_length=255, null=True)),
                ("visual_str", models.CharField(max_length=255, null=True)),
                ("corpse_visual_str", models.CharField(max_length=255, null=True)),
                ("icon_str", models.CharField(max_length=255, null=True)),
                (
                    "Spawn_Inventory_Item_Section",
                    models.CharField(max_length=255, null=True),
                ),
                (
                    "Spawn_Inventory_Item_Probability",
                    models.CharField(max_length=255, null=True),
                ),
                ("class_name", models.CharField(max_length=255, null=True)),
                ("terrain", models.CharField(max_length=255, null=True)),
                ("species", models.CharField(max_length=255, null=True)),
                ("spec_rank", models.CharField(max_length=255, null=True)),
                (
                    "icon",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="game_parser.icon",
                    ),
                ),
                (
                    "name_translation",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="game_parser.translation",
                    ),
                ),
                (
                    "monster_part",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="drop_from_monster",
                        to="game_parser.monsterpart",
                    ),
                ),
            ],
            options={
                "verbose_name": "Мутант",
                "verbose_name_plural": "Мутанты",
            },
        ),
        migrations.CreateModel(
            name="Weapon",
            fields=[
                (
                    "baseitem_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="game_parser.baseitem",
                    ),
                ),
                ("ef_main_weapon_type", models.CharField(max_length=10, null=True)),
                ("ef_weapon_type", models.CharField(max_length=10, null=True)),
                ("weapon_class", models.CharField(max_length=255, null=True)),
                (
                    "ammo_mag_size",
                    models.PositiveIntegerField(
                        null=True,
                        verbose_name="Размер магазина",
                    ),
                ),
                (
                    "fire_modes_str",
                    models.CharField(
                        max_length=255,
                        null=True,
                        verbose_name="Режимы стрельбы(сырая строка)",
                    ),
                ),
                (
                    "ammo_class_str",
                    models.CharField(
                        max_length=1000,
                        null=True,
                        verbose_name="Боеприпасы",
                    ),
                ),
                (
                    "grenade_class_str",
                    models.CharField(
                        max_length=1000,
                        null=True,
                        verbose_name="Типы гранат для подствольника",
                    ),
                ),
                (
                    "rpm",
                    models.IntegerField(
                        null=True,
                        verbose_name="Скорострельность выстрелов в минуту",
                    ),
                ),
                (
                    "scope_status_str",
                    models.CharField(
                        max_length=5,
                        null=True,
                        verbose_name="Возможность установки прицела",
                    ),
                ),
                (
                    "silencer_status_str",
                    models.CharField(
                        max_length=5,
                        null=True,
                        verbose_name="Возможность установки глушителя",
                    ),
                ),
                (
                    "grenade_launcher_status",
                    models.CharField(
                        max_length=5,
                        null=True,
                        verbose_name="Возможность установки ГП",
                    ),
                ),
                (
                    "scope_name",
                    models.CharField(
                        max_length=255,
                        null=True,
                        verbose_name="Название прицела",
                    ),
                ),
                (
                    "silencer_name",
                    models.CharField(
                        max_length=255,
                        null=True,
                        verbose_name="Название глушителя",
                    ),
                ),
                (
                    "grenade_launcher_name",
                    models.CharField(
                        max_length=255,
                        null=True,
                        verbose_name="Название ГП",
                    ),
                ),
                (
                    "ammo_limit",
                    models.PositiveIntegerField(null=True, verbose_name="???"),
                ),
                (
                    "ammo_elapsed",
                    models.PositiveIntegerField(null=True, verbose_name="???"),
                ),
                ("ammo_current", models.IntegerField(null=True)),
                ("slot", models.IntegerField(null=True)),
                (
                    "ammo",
                    models.ManyToManyField(
                        to="game_parser.ammo",
                        verbose_name="Патроны",
                    ),
                ),
            ],
            options={
                "verbose_name": "Оружие",
                "verbose_name_plural": "Оружие",
            },
            bases=("game_parser.baseitem",),
        ),
        migrations.CreateModel(
            name="ItemReward",
            fields=[
                (
                    "basescriptreward_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="game_parser.basescriptreward",
                    ),
                ),
                ("raw_item", models.CharField(max_length=512)),
                ("count", models.IntegerField(null=True)),
                ("raw_count", models.CharField(max_length=512)),
                (
                    "item",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="got_in_functions",
                        to="game_parser.baseitem",
                        verbose_name="Предмет",
                    ),
                ),
            ],
            options={
                "verbose_name": "Спавн предмета в скрипте",
            },
            bases=("game_parser.basescriptreward",),
        ),
        migrations.CreateModel(
            name="SpawnReward",
            fields=[
                (
                    "basescriptreward_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="game_parser.basescriptreward",
                    ),
                ),
                ("raw_maybe_item", models.CharField(max_length=512)),
                ("raw_call", models.TextField(max_length=2048)),
                ("x", models.FloatField(null=True)),
                ("y", models.FloatField(null=True)),
                ("z", models.FloatField(null=True)),
                ("raw_level_vertex", models.CharField(max_length=512)),
                ("raw_game_vertex_id", models.CharField(max_length=512)),
                ("level_vertex", models.IntegerField(null=True)),
                ("game_vertex_id", models.IntegerField(null=True)),
                ("xyz_raw", models.CharField(max_length=512)),
                ("raw_target", models.CharField(max_length=512, null=True)),
                (
                    "item",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="game_parser.baseitem",
                        verbose_name="Предмет",
                    ),
                ),
            ],
            options={
                "verbose_name": "Спавн в скрипте",
            },
            bases=("game_parser.basescriptreward",),
        ),
        migrations.CreateModel(
            name="StorylineCharacter",
            fields=[
                (
                    "character_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="game_parser.character",
                    ),
                ),
                ("game_id", models.CharField(max_length=256, unique=True)),
                ("name_raw", models.CharField(max_length=512)),
                ("no_random", models.IntegerField(null=True)),
                ("community_default_raw", models.CharField(max_length=10, null=True)),
                ("icon_raw", models.CharField(max_length=512)),
                ("class_raw", models.CharField(max_length=512)),
                ("rank", models.IntegerField(null=True)),
                ("reputation", models.IntegerField(null=True)),
                ("supplies_raw", models.TextField(null=True)),
                ("dialogs_raw", models.TextField(null=True)),
                ("visual_raw", models.TextField(null=True)),
                ("start_dialog_row", models.TextField(null=True)),
                ("comments", models.TextField(null=True)),
                ("crouch_type_raw", models.CharField(max_length=128, null=True)),
                ("snd_config_raw", models.CharField(max_length=128, null=True)),
                ("money_min_raw", models.CharField(max_length=12, null=True)),
                ("money_max_raw", models.CharField(max_length=12, null=True)),
                ("money_inf_raw", models.CharField(max_length=12, null=True)),
                ("terrain_sect_raw", models.TextField(null=True)),
                ("bio_raw", models.TextField(null=True)),
                ("team_raw", models.TextField(null=True)),
                (
                    "community",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="game_parser.community",
                    ),
                ),
                ("dialogs", models.ManyToManyField(to="game_parser.dialog")),
                (
                    "icon",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="game_parser.icon",
                    ),
                ),
                (
                    "name_translation",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="game_parser.translation",
                    ),
                ),
            ],
            bases=("game_parser.character",),
        ),
        migrations.AddField(
            model_name="stalkersection",
            name="character_profile",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="+",
                to="game_parser.storylinecharacter",
            ),
        ),
        migrations.AddField(
            model_name="spawnitem",
            name="character_profile",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="game_parser.storylinecharacter",
                verbose_name="Профиль НПС",
            ),
        ),
        migrations.AddField(
            model_name="gamestoryid",
            name="character",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="game_parser.storylinecharacter",
                verbose_name="Предмет",
            ),
        ),
        migrations.AddField(
            model_name="customspawnitem",
            name="character_profile",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="game_parser.storylinecharacter",
                verbose_name="Профиль НПС",
            ),
        ),
        migrations.CreateModel(
            name="CyclicQuestItemReward",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("raw_item", models.CharField(max_length=255)),
                ("count", models.IntegerField(default=1)),
                (
                    "item",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="cyclic_quests_when_needed",
                        to="game_parser.baseitem",
                        verbose_name="Целевой предмет",
                    ),
                ),
                (
                    "quest",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="item_rewards",
                        to="game_parser.cyclicquest",
                        verbose_name="Предмет",
                    ),
                ),
            ],
            options={
                "verbose_name": "Предмет в награду за ЦЗ",
                "verbose_name_plural": "Предметы в наградах за ЦЗ",
                "unique_together": {("item", "quest"), ("raw_item", "quest")},
            },
        ),
        migrations.CreateModel(
            name="ItemInBuy",
            fields=[
                (
                    "itemintradebase_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="game_parser.itemintradebase",
                    ),
                ),
                (
                    "min_price_modifier",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=5,
                        verbose_name="Множитель цены(от)",
                    ),
                ),
                (
                    "max_price_modifier",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=5,
                        verbose_name="Множитель цены(до)",
                    ),
                ),
                (
                    "trade",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="items",
                        to="game_parser.buy",
                        verbose_name="Торговля",
                    ),
                ),
            ],
            options={
                "verbose_name": "Предмет в покупке",
                "verbose_name_plural": "Предметы в покупке",
            },
            bases=("game_parser.itemintradebase",),
        ),
        migrations.CreateModel(
            name="ItemInSell",
            fields=[
                (
                    "itemintradebase_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="game_parser.itemintradebase",
                    ),
                ),
                (
                    "probability",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=5,
                        verbose_name="Вероятность",
                    ),
                ),
                ("count", models.IntegerField(verbose_name="Кол-во предметов")),
                (
                    "min_price_modifier",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=5,
                        verbose_name="Множитель цены(от)",
                    ),
                ),
                (
                    "max_price_modifier",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=5,
                        verbose_name="Множитель цены(до)",
                    ),
                ),
                (
                    "trade",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="items",
                        to="game_parser.sell",
                        verbose_name="Торговля",
                    ),
                ),
            ],
            options={
                "verbose_name": "Предмет в продаже",
                "verbose_name_plural": "Предметы в продаже",
            },
            bases=("game_parser.itemintradebase",),
        ),
        migrations.CreateModel(
            name="ItemInTreasureBox",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("count", models.IntegerField(null=True, verbose_name="Количество")),
                (
                    "box",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="game_parser.inventorybox",
                        verbose_name="Тайник",
                    ),
                ),
                (
                    "item",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="game_parser.baseitem",
                        verbose_name="Предмет",
                    ),
                ),
            ],
            options={
                "verbose_name": "Предметы в тайнике",
                "verbose_name_plural": "Предметы в тайниках",
                "unique_together": {("item", "box")},
            },
        ),
        migrations.CreateModel(
            name="QuestRandomRewardThrough",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("count", models.IntegerField(default=1, verbose_name="Кол-во")),
                (
                    "quest",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="random_rewards",
                        to="game_parser.cyclicquest",
                        verbose_name="ЦЗ",
                    ),
                ),
                (
                    "reward",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="quests",
                        to="game_parser.questrandomreward",
                        verbose_name="Тип награды",
                    ),
                ),
            ],
            options={
                "verbose_name": "Рандомная награда в ЦЗ",
                "verbose_name_plural": "Связи Цз и случайной награды",
                "unique_together": {("reward", "quest")},
            },
        ),
        migrations.AddConstraint(
            model_name="dialogphrase",
            constraint=models.UniqueConstraint(
                fields=("local_id", "dialog"),
                name="unique_dialog_phrase_by_local_id_and_dialog",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="itemintreasure",
            unique_together={("item", "treasure")},
        ),
        migrations.AddField(
            model_name="weapon",
            name="grenade_launcher",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="use_in_weapons",
                to="game_parser.grenadelauncher",
                verbose_name="Подствольник",
            ),
        ),
        migrations.AddField(
            model_name="weapon",
            name="scope",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="use_in_weapons",
                to="game_parser.scope",
                verbose_name="Прицел",
            ),
        ),
        migrations.AddField(
            model_name="weapon",
            name="silencer",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="use_in_weapons",
                to="game_parser.silencer",
                verbose_name="Глушитель",
            ),
        ),
    ]
